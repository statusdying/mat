library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity garaz_brainstorm is
    Port ( clk  in  STD_LOGIC;
           o  in  STD_LOGIC;
           p  in  STD_LOGIC;
           rst  in  STD_LOGIC;
           stav  inout  STD_LOGIC_VECTOR (2 downto 0);
           semafor  out  STD_LOGIC);
end garaz_brainstorm;

architecture Behavioral of garaz_brainstorm is
	signal state, next_state  STD_LOGIC_VECTOR (2 downto 0);
	constant s0  STD_LOGIC_VECTOR (2 downto 0)= 000;
	constant s1  STD_LOGIC_VECTOR (2 downto 0)= 001;
	constant s2  STD_LOGIC_VECTOR (2 downto 0)= 010;
	constant s3  STD_LOGIC_VECTOR (2 downto 0)= 011;
	constant s4  STD_LOGIC_VECTOR (2 downto 0)= 100;
	constant s5  STD_LOGIC_VECTOR (2 downto 0)= 101;
	
	
begin
 
   SYNC_PROC process (clk)
   begin
     
         if (rst = '1') then
            state = s0;
         elsif rising_edge(clk) then
            state = next_state;
         end if;        
      
   end process SYNC_PROC;
 
   OUTPUT_DECODE process (state)
   begin    
   case (state) is 
      when s5 =
         semafor = '1';
			
      when others =
			semafor = '0';
			
         end case;
   end process OUTPUT_DECODE;
 
 
 
   NEXT_STATE_DECODE process (state, o, p)
   begin
      case (state) is
         when s0 =
            if (p = '1' AND o = '0') then
               next_state = s1;
				else
					next_state = s0;
            end if;
         when s1 =
				if (p = '1' AND o = '0') then
               next_state = s2;
				elsif(p = '0' AND o = '1') then
					next_state = s0;
				else
					next_state = s1;
            end if;
				
         when s2 =
            if (p = '1' AND o = '0') then
               next_state = s3;
				elsif(p = '0' AND o = '1') then
					next_state = s1;
				else
					next_state = s2;
            end if;
				
		   when s3 =
           if (p = '1' AND o = '0') then
              next_state = s4;
			  elsif(p = '0' AND o = '1') then
				  next_state = s2;
			  else
					next_state = s2;
            end if;	
			when s4 =
           if (p = '1' AND o = '0') then
              next_state = s5;
			  elsif(p = '0' AND o = '1') then
				  next_state = s3;
			  else
					next_state = s4;
            end if;		
			when s5 =
           if (p = '0' AND o = '1') then
              next_state = s4;
			  else
					next_state = s5;
           end if;	
				
         when others = NULL;
           
      end case;  
			stav = state;
   end process NEXT_STATE_DECODE;

				

end Behavioral;

